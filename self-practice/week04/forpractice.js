// ‡πÉ‡∏ä‡πâ chat gpt ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÉ‡∏´‡πâ
class Product {
    constructor(id , title , price){
        if(!d || price < 0) 
            throw new error("invalid product");
        this.id = id;
        this.title = title;
        this.price = price;
    }
    netPrice(){
        return this.price;
    }
}

// üåü ‡∏ä‡∏∏‡∏î‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ù‡∏∂‡∏Å
// arrays-practice.js

// 1) ‡πÉ‡∏ä‡πâ filter() ‡∏´‡∏≤‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
console.log("=== 1) FILTER: ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏•‡πÑ‡∏°‡πâ‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ===")
const fruits = ["apple", "mango", "pineapple", "pear", "banana"]
const longfruits = fruits.filter(f => f.length > 5)
console.log(longfruits)

// 2) ‡πÉ‡∏ä‡πâ map() ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠ student ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà
console.log("\n=== 2) MAP: ‡∏ä‡∏∑‡πà‡∏≠ student ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà ===")
const students = [
  {id:1, name:"Somchai"},
  {id:2, name:"Suda"},
  {id:3, name:"John"}
]
const upperStu = students.map(s => s.name.toUpperCase())
console.log(upperStu)


// 3) ‡πÉ‡∏ä‡πâ find() ‡∏´‡∏≤‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà id = 2
console.log("\n=== 3) FIND: ‡∏´‡∏≤ student ‡∏ó‡∏µ‡πà id = 2 ===")
const findStu = students.find(s => s.id === 2)
console.log(findStu)

// 4) ‡πÉ‡∏ä‡πâ reduce() ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
console.log("\n=== 4) REDUCE: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ===")
const cart = [
  { product: "pen", price: 5, qty: 10 },
  { product: "book", price: 50, qty: 2 },
  { product: "eraser", price: 3, qty: 5 }
]
const total = cart.reduce((sum,item) => sum + item.price * item.qty, 0)
console.log('‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ : ',total , "‡∏ö‡∏≤‡∏ó")

const net = total * 1.07
console.log("‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î(net) : ", net)

// 5) ‡πÉ‡∏ä‡πâ push/pop ‡∏à‡∏≥‡∏•‡∏≠‡∏á stack ‡πÅ‡∏•‡∏∞ shift/unshift ‡∏à‡∏≥‡∏•‡∏≠‡∏á queue
// Stack (LIFO)
console.log("\n=== 5) STACK / QUEUE ===")
const stack = []
stack.push("book A")
stack.push("book B")
stack.push("book C")
console.log("stack after push:", stack)
console.log("pop ->", stack.pop()) 
console.log("stack after pop:", stack)

// Queue (FIFO)
const queue = []
queue.push("cust1")
queue.push("cust2")
queue.push("cust3")
console.log("queue after enqueue:", queue)
console.log("dequeue (shift) ->", queue.shift()) 
console.log("queue after dequeue:", queue)

// 6) ‡πÉ‡∏ä‡πâ splice() ‡∏•‡∏ö "green" ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å array ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° "pink" ‡∏´‡∏•‡∏±‡∏á "blue"
console.log("\n=== 6) SPLICE: ‡∏•‡∏ö green ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° pink ‡∏´‡∏•‡∏±‡∏á blue ===")
const colors = ["red","green","blue","yellow"]
const greenIdx = colors.indexOf("green")
if (greenIdx !== -1) colors.splice(greenIdx, 1)

const blueIdx = colors.indexOf("blue")
if (blueIdx !== -1) colors.splice(blueIdx + 1, 0, "pink") 
console.log(colors)

// 7) ‡πÉ‡∏ä‡πâ slice() ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç index 2 ‡∏ñ‡∏∂‡∏á 4
console.log("\n=== 7) SLICE: index 2 ‡∏ñ‡∏∂‡∏á 4 ===")
const nums = [1,2,3,4,5,6,7]
const part = nums.slice(2, 5)
console.log(part)

// 8) ‡πÉ‡∏ä‡πâ includes() ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ "orange" ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô array ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
console.log("\n=== 8) INCLUDES: ‡∏°‡∏µ orange ‡πÑ‡∏´‡∏° ===")
const arr = ["apple","mango","banana"]
console.log("has orange ?", arr.includes("orange"))
console.log("has apple ?", arr.includes("apple"))
