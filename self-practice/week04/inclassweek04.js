//Arrays Methods
/*
anonymous function - ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Ñ‡πå‡∏ä‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠ ‡∏û‡∏ß‡∏Å arrays function ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏≠‡πâ‡∏≤‡∏á‡∏ñ‡∏∂‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å
‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡∏∑‡πà‡∏≠‡∏≠‡πâ‡∏≤‡∏á‡∏ñ‡∏∂‡∏á

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡πà‡∏≤‡∏á
anonymous function created as a fucntion expression

    function(){ }

anonymous function created as a arrow fucntion 

    () => {}
------------------------------------------------
    ?array function ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏õ‡πá‡∏ô higher order function ‡∏Ñ‡∏∑‡∏≠ fn‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏öfn‡πÄ‡∏õ‡πá‡∏ô parameter
    parameter ‡∏Ñ‡∏∑‡∏≠ ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏ß‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢ word ‡∏Ñ‡∏∑‡∏≠ parameter ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å  word.length > 6
    argument ‡∏Ñ‡∏∑‡∏≠ ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡πÉ‡∏™‡πà ‡∏à‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡πÉ‡∏™‡πà‡∏Å‡∏•‡πà‡∏≠‡∏á ['spray', 'limit'] arguments ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å array

    const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];
    const result = words.filter(word => word.length > 6);       filter() = ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å (higher-order function)
                                                        parameter ‡∏Ç‡∏≠‡∏á filter = ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡∏ï‡∏±‡∏ß (callback) ‚Üí (word => word.length > 6)
                                                        word = parameter ‡∏Ç‡∏≠‡∏á callback (‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÑ‡∏ß‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞ element)
                                                        element ‡πÉ‡∏ô array ‡πÄ‡∏ä‡πà‡∏ô "spray", "limit" = argument ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
                                                        !filter ‡∏à‡∏∞‡∏ß‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß ‡πÄ‡∏≠‡∏≤ element ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô callback ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ä‡πá‡∏Ñ true/false
    console.log(result);

    expected output: Array ["exuberant", "destruction", "present"]
    
    ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô function ‡∏ô‡∏±‡πâ‡∏ô‡∏ö‡πà‡∏≠‡∏¢ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡πÅ‡∏¢‡∏Å‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏à‡∏∞‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠ ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô arrow ‡∏´‡∏£‡∏∑‡∏≠ declar 
    ‡∏ñ‡πâ‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡πÄ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏≠‡∏≤‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡πâ‡∏≤‡∏á‡πÄ‡πÄ‡∏Ñ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•

    ‡∏à‡∏∞‡πÉ‡∏´‡πâ filter ‡∏≠‡πâ‡∏≤‡∏á‡∏ñ‡∏∂‡∏á filter( wordlenght) ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà()‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡πâ‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏°‡∏µ function wordlenght (){ }
    
*‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏±‡∏ö

‡∏∑‡∏∑named function - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ö‡πà‡∏≠‡∏¢‡πÜ ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠
    
fucntion declarations

    function foo() {}

Names function expression

    const barFn = function bar(){}          ‡∏≠‡πâ‡∏≤‡∏á‡∏ú‡πà‡∏≤‡∏ô barfn ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠ function

------------------------------------------------------------------------------

todo array iterator method 
    ‡∏Ñ‡∏∑‡∏≠‡∏û‡∏ß‡∏Å‡πÄ‡∏°‡∏ò‡∏≠‡∏î (methods) ‡∏Ç‡∏≠‡∏á Array ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß 
    ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏™‡πà‡∏á callback function ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ ‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏±‡∏ô‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö element ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á
    ‡∏û‡∏ß‡∏Å‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ visit ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏ô array ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
    
    foreach()‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏ô‡∏•‡∏π‡∏õ ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡πÜ for i ‡πÅ‡∏ï‡πà‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö array
        -‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ callback function ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏ã‡πâ‡∏≥ 
        -‡∏Ñ‡∏•‡∏∏‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏õ 
        -‡πÑ‡∏°‡πà‡∏°‡∏µ return


    map()‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô value ‡∏Ç‡∏≠‡∏á ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏±‡πâ‡∏ô
        -map ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô value ‡∏Ç‡∏≠‡∏á item ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏£
        -map ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö object ‡πÄ‡∏£‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡πà property ‡∏Ç‡∏≠‡∏á object ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        -callback ‡∏Ç‡∏≠‡∏á map ‡∏ï‡πâ‡∏≠‡∏á return ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
    filter()‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
        -callback function ‡πÉ‡∏ô filter ‡∏ï‡πâ‡∏≠‡∏á return ‡∏Ñ‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô boolean ‡πÄ‡∏™‡∏°‡∏≠ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ T F ‡∏à‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏≠‡∏Å
        -‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏π‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏Ñ‡∏¥‡∏î 
        -‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡πÄ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠

    find()‡∏´‡∏≤‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
        -callback funtion ‡πÅ‡∏Ñ‡πà first element ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏ä ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏ú‡∏• T F ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏´‡∏≤ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡πá‡∏à‡∏∞ undefined
        -callback fucntion ‡πÉ‡∏™‡πà‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç

    findIndex()‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏´‡∏≤‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏ô index
        -‡∏´‡∏≤ index ‡∏Ç‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ß‡πà‡∏≤‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÑ‡∏´‡∏° ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ -1 ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏ï‡∏≥‡πÄ‡πÄ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠

    every() and some() ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏°‡∏±‡πâ‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏°‡∏±‡πâ‡∏¢ return ‡πÄ‡∏õ‡πá‡∏ô boolean ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ return array
        - every = for all ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô T
        - some = for some ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß ‡πÄ‡∏õ‡πá‡∏ô T

    reduce() ‡∏•‡∏î‡∏Ñ‡πà‡∏≤
        - ‡∏¢‡∏∏‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å array ‡∏ó‡∏±‡πâ‡∏á‡∏Å‡πâ‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô 1 ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏ï‡∏£‡∏ácallback ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô how to ‡∏•‡∏î‡∏Ñ‡πà‡∏≤
        - ‡∏ß‡∏¥‡∏ò‡∏µ‡∏¢‡∏∏‡∏ö string ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡πÉ‡∏ô array 
        - ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏ã‡∏ï initial value ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡πÄ‡∏£‡∏Å


*Stack and Queue Methods 
    ü•û Stack (‡∏Å‡∏≠‡∏á)
    üëâ ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ LIFO (Last In First Out) = ‡πÄ‡∏≠‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏Ç‡πâ‡∏≤array ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ï‡πà‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô
    
    üì¶ Queue (‡∏Ñ‡∏¥‡∏ß)
    üëâ ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ FIFO (First In First Out) = ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô ‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô 

    push() ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô array (‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ push ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ö‡∏ö arr.length)
    pop()  ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡πâ‡∏≤‡∏¢ array (‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏î‡πâ‡∏ß‡∏¢)
    ‡∏™‡∏≠‡∏á‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πâ‡∏≤‡∏¢ array

    unshift()
    shift()
    ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏ô array

    shift = pop ‡∏Ñ‡∏∑‡∏≠ remove item ‡πÉ‡∏ô arrays ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏Ñ‡πà‡∏ï‡πâ‡∏ô
        -remove ‡∏ï‡πâ‡∏ô array length ‡∏•‡∏î‡∏•‡∏á shift‡∏´‡∏≤‡∏¢
    unshift = push ‡∏Ñ‡∏∑‡∏≠ add item ‡πÄ‡∏Ç‡πâ‡∏≤ arrays
        -‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏ô array size ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô 1

*Subarray Methods 
    ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏¢‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏° arrays 
    
    slice() ‡∏ï‡∏±‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
        -‡∏ö‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î (‡∏ï‡∏±‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á, ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ï‡∏±‡∏î) ‡πÄ‡∏ä‡πà‡∏ô .slice(2,4) ‡∏Å‡πá‡∏à‡∏∞‡∏ï‡∏±‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡πÄ‡∏ï‡πà 2,3 ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ï‡∏±‡∏î 4
                                                        ‡∏ñ‡πâ‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢
                                                        ‡∏ñ‡πâ‡∏≤(2,-1) end < 0 ‚Üí ‡πÄ‡∏≠‡∏≤ end + length ‡∏°‡∏≤‡∏Ñ‡∏¥‡∏î‡πÅ‡∏ó‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á

*   splice() ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏¢ add remove replace ‡πÑ‡∏î‡πâ‡∏´‡∏°‡∏î‡πÄ‡∏•‡∏¢    splice()	‡∏ï‡∏±‡∏î‚Äì‡πÅ‡∏ó‡∏£‡∏Å‚Äì‡∏•‡∏ö array	
        -let arrDeletedItems = arr.splice(start[, deleteCount[, item1[,item2[,...]]]])
        deletecount = 0 ‡∏´‡∏£‡∏∑‡∏≠ negative ‡∏à‡∏∞‡πÑ‡∏°‡πà remove 
                    = 1 ‡∏•‡∏ö 1 ‡∏ï‡∏±‡∏ß >1 ‡∏•‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
                ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏° ( ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á , 0 ‡πÑ‡∏°‡πà‡∏•‡∏ö , ‡πÉ‡∏™‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°)
                ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà ( ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á , 1 ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ‡∏Å‡πá‡∏à‡∏∞‡∏•‡∏ö‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ , ‡πÉ‡∏™‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡πÄ‡∏ó‡∏ô‡∏ó‡∏µ‡πà)
        start ‡πÄ‡∏•‡∏Ç‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á index 0 ‡∏ï‡∏±‡∏ß‡πÄ‡πÄ‡∏£‡∏Å 1 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
        .splice(1,0, ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°)
        .splice(1,1, ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà)

    fill() ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÜ ‡∏•‡∏á‡πÉ‡∏ô array ‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        - ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ 
        - arr.fill(value , start, end)
        -fill(v) ‚Üí ‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á array
        -fill(v, s) ‚Üí ‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å index s ‡∏ñ‡∏∂‡∏á‡∏ó‡πâ‡∏≤‡∏¢
        -fill(v, s, e) ‚Üí ‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å s ‡∏ñ‡∏∂‡∏á‡∏Å‡πà‡∏≠‡∏ô e

*Searching and Sorting Methods
    ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏±‡∏î array

    indexOf() ‡∏´‡∏≤index
    includes()  ‡∏°‡∏µ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏ô array ‡∏°‡∏±‡πâ‡∏¢
        -‡πÑ‡∏ß‡πâ
    sort()  ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö
    reverse()  ‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏≤‡∏ô array ‡∏à‡∏≤‡∏Å‡∏ó‡πâ‡∏≤‡∏¢‡∏°‡∏≤‡∏´‡∏ô‡πâ‡∏≤ ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏≤‡∏ó‡πâ‡∏≤‡∏¢

*Array to String Conversion
    
    join()‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô array ‡πÄ‡∏õ‡πá‡∏£ string
 */

//filter function does not change an original array
const words = ['mango','apple','mangosteen','orange']

//1.anonymous arrow function ‡πÉ‡∏ô‡∏£‡∏π‡∏õ callback
// const shortsWords=words.filter((word)=>word.length <= 6) 

//2.annonymous function declaration
// const shortsWords=words.filter(     function(word){
//     return word.length <= 6
// }   )   //‡πÉ‡πâ‡∏äfunction ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏•‡∏¢‡πÑ‡∏°‡πà‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ function ‡∏Å‡πá‡πÑ‡∏î‡πâ


//3. reuse callback function (named function)
function wordLength(word) {
  return word.length <= 6
}
console.log('‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ array ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô')
const shortWords = words.filter(wordLength)
console.log(words)
console.log(shortWords)
//sort function changes original array
console.log("‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ array original")
const sortedWords = words.sort()
console.log(words)
console.log(sortedWords)

console.log('--------------------------------------')
// map()‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô value ‡∏Ç‡∏≠‡∏á ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ô‡∏±‡πâ‡∏ô
    //‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏á word ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà

console.log('‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ map')
const upper = words.map(word => word.toUpperCase());

console.log('‡πÇ‡∏à‡∏ó‡∏¢‡πå : ' , words)
console.log("‡πÉ‡∏ä‡πâ map ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà : ", upper)

//notes
// toLocaleUpperCase() / toLocaleLowerCase() ‚Üí ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà/‡πÄ‡∏•‡πá‡∏Å ‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏©‡∏≤
// console.log("istanbul".toLocaleUpperCase("tr-TR")); // ƒ∞STANBUL (‡∏†‡∏≤‡∏©‡∏≤‡∏ï‡∏∏‡∏£‡∏Å‡∏µ‡∏°‡∏µ‡∏ï‡∏±‡∏ß ƒ∞ ‡∏û‡∏¥‡πÄ‡∏®‡∏©)
// console.log("istanbul".toUpperCase());              // ISTANBUL (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏õ‡∏Å‡∏ï‡∏¥)

const students = [
  { id: 1, name: "Somchai Jaidee" },
  { id: 2, name: "Suda Deejai" },
  { id: 3, name: "John Smith" },
]
const map2 = students.map(student => student.id);
console.log(map2);

console.log("‡πÄ‡∏≠‡∏≤‡πÅ‡∏ï‡πàstudents id :" , students.map(students => students.id))
console.log("‡πÄ‡∏≠‡∏≤‡πÅ‡∏ï‡πàstudents id ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ñ‡∏π‡πà (‡πÅ‡∏ö‡∏ö functional) :" , students.filter((students) => students.id % 2 === 0 ))
//‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢
const id = students.map(students => students.id)
const idkoo = id.filter((students) => students % 2 === 0)
console.log(idkoo)

//return all words that include 'mango' (ignore case) ‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‚Äì‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà
//result ['Mango', 'mangosteen', 'mangoes']

const words2 = ["Mango", "Apple", "mangosteen", "orange","mangoes"];
const found = words2.filter( w => w.toLowerCase().includes('mango'))
console.log(found)

//includes() -> array ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°
console.log(words2.includes("Apple")) //true 
console.log(words2.includes("apple")) //false
console.log(words2.includes("app")) //false 

// includes() ->string ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô
// const sentence = "The quick brown fox jumps over the lazy dog."
// const word = "Ox"
// console.log(sentence.includes(word))
 
//check array that has word "apple" (ignore case)or not if has display "has apple"
//otherwise, display "does not have apple"

// const words2 = ["Mango", "Apple", "mangosteen", "orange","mangoes"];
//‡πÅ‡∏ö‡∏ö‡∏¢‡∏≤‡∏ß
const cases = words2.map( wo => wo.toLowerCase())
if(cases.includes('apple')){
    console.log('has apple')
}
else {
    console.log('does not have apple');
}
//‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏°‡∏≤‡πÄ‡∏•‡∏¢
if(words2.map(w=>w.toLowerCase()).includes("apple")){
  console.log("has apple");
}else{
  console.log("does not have apple");
}

//reduce
const product = [1, 'RED', 102]
const productDetail = product.reduce((detail, prop) => {    //(‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏∞‡∏™‡∏° , ‡∏ï‡∏±‡∏ß‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤visit ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏±‡∏ô‡πÉ‡∏ô array)
return prop === 'RED' ? detail?.concat('R') : detail?.concat(prop)
}, '') //1R102
console.log(productDetail)
// ‚Äò‚Äô ‡∏Ñ‡∏∑‡∏≠ initial value = ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏™‡∏∞‡∏™‡∏° (accumulator) ‡πÉ‡∏ô reduce()

const cart = [
  { productId: 1001, price: 500, quantity: 2 },
  { productId: 1002, price: 10, quantity: 3 },
  { productId: 1003, price: 5, quantity: 10 },
]
//find cart total and return object that show the total {total: 1080}
const total = cart.reduce((acc, cur) => {
  return { total: acc.total + (cur.price * cur.quantity) };
}, { total: 0 });

console.log(total);


// cart[cart.length] = { productId: 5555, price: 1, quantity: 4 }
cart.push({ productId: 5555, price: 1, quantity: 4 })
console.log(cart)
console.log(cart.pop()) //{ productId: 5555, price: 1, quantity: 4 }
console.log(cart.length) //3


const words3 = ["Mango", "Apple", "mangosteen", "orange","mangoes"];
//replace "mangosteen" with 'banana'
words3.splice(2,1,'banana'  )
console.log(words3)
//remove the last two words
words3.splice(3,2)
console.log(words3)
//add 'melon' and 'cherry' after 'Apple'
words3.splice(1,0,'melon','cherry')
console.log(words3)


const words4 = ["Mango", "Apple", "mangosteen", "orange","mangoes"];

//slice items at index 2 to last
console.log(words4.slice(2))

//slice the first to third
console.log(words4.slice(0,3))

//fill null to all items
console.log(words4.fill(null))

console.log(" ")
console.log(" --------------------------------- ")
console.log(" ")

const wordd =["apple", "Mango", "orange", "Banana"]
// wordd.reverse() //[ 'Banana', 'orange', 'Mango', 'apple' ]
// 1.annonymous arrow function
const startAword = wordd.filter( wordd => wordd.startsWith('a'))    //‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á wordd
console.log("1.annonymous arrow function : ",startAword)

//2.annonymous function declaration
const startAword1 = wordd.filter(function (word) {
    return word.startsWith("a")
})
console.log("2.annonymous function declaration :  ",startAword1)

//3.named arrow funciton
const checkStartA =(word)=> word.startsWith("a")
const startAword2 = wordd.filter(checkStartA)
console.log("3.named arrow funciton : ",startAword2)

//4.named function declaration
function checkStartA2(word){
    return word.startsWith("a")
}
const startAword3 = wordd.filter(checkStartA2)
console.log("4.named function declaration : ",startAword3)

const worddd =["apple", "Mango", "orange", "Banana"]

const employees = [
  {
    id: 'e1001',
    firstname: "Somchai",
    lastname: "Jaidee",
  },
  {
    id: 'e1002',
    firstname: "Pornchai",
    lastname: "Deejai",
  },
  {
    id: 'e1005',
    firstname: "Suda",
    lastname: "Rakdee",
  },
]
 
//output ['SOMCHAI JAIDEE' , 'PORNCAHI DEEJAI' , 'SUDA RAKDEE']
const map1 = employees.map(employee => employee.firstname + " " + employee.lastname)
const up = map1.map(emp => emp.toUpperCase() )
console.log(up)



const fullName = [];
employees.map(name => {
    fullName.push(`${name.firstname.toUpperCase()} ${name.lastname.toUpperCase()} `) // ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö string concat ‡πÉ‡∏ä‡πâ `${ }`
})
const filterName = fullName.filter(nameJai =>
    nameJai.toLowerCase().includes('jai')
)
console.log(filterName);
 
const carts = [
  { productId: 1002, price: 10, amount: 5 },
  { productId: 2005, price: 100, amount: 2 },
  { productId: 5001, price: 5, amount: 4 },
]

const totall = carts.reduce((acc, cur) => {
  return { total: acc.total + (cur.price * cur.amount) };
}, { total: 0 });

const result = totall.total
const netprice = (totall.total * 1.07).toFixed(2)
console.log("total : " , result)
console.log("net price : " , netprice)

const nums = [2, 4, 6]
// nums[nums.length] = 8
console.log(nums.push(8)) //append in the end of array, return new length
console.log(nums)
nums.unshift(10) //add in the beginning of array
console.log(nums)
nums.pop() //remove in the end of array
console.log(nums)
nums.shift() //remove in the beginning of array
console.log(nums)

const word5 = ["apple", "orange" ,"banana"]
//add 'cherry after 'orange'
word5.splice(2 , 0 , "cherry", "berry")
console.log(word5)

//delete 'cherry
// [ 'apple', 'orange', 'cherry', 'berry', 'banana' ]
word5.splice(2 , 1)
console.log(word5)

// [ 'apple', 'orange', 'berry', 'banana' ]
//replae 'berry' with 'mango'
words.splice(2,1,"mango")
console.log(word5)
